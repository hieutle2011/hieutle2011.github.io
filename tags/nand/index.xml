<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>nand on Hieu&#39;s Blog</title>
    <link>https://hieutle2011.github.io/tags/nand/</link>
    <description>Recent content in nand on Hieu&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <managingEditor>hieuletrung102@gmail.com (Hieu Le)</managingEditor>
    <webMaster>hieuletrung102@gmail.com (Hieu Le)</webMaster>
    <lastBuildDate>Wed, 09 Oct 2019 20:23:12 +0700</lastBuildDate>
    
	<atom:link href="https://hieutle2011.github.io/tags/nand/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Nand2tetris W6</title>
      <link>https://hieutle2011.github.io/post/nand/nand2tetris-w6/</link>
      <pubDate>Wed, 09 Oct 2019 20:23:12 +0700</pubDate>
      <author>hieuletrung102@gmail.com (Hieu Le)</author>
      <guid>https://hieutle2011.github.io/post/nand/nand2tetris-w6/</guid>
      <description>This week marks the end of building hardware parts and the beginning of the computer software hierarchy. Each computer has a binary machine language, including a number of 0&amp;rsquo;s and 1&amp;rsquo;s, and a symbolic machine language, consisting of human-friendly mnemonics. Both languages serve the same purpose and are completely equivalent.
However, assembly language is far easier for human to write and understand. To enjoy this benefit, it is required for a assembler to translate the symbols and labels into binary machine code.</description>
    </item>
    
    <item>
      <title>Nand2tetris W5</title>
      <link>https://hieutle2011.github.io/post/nand/nand2tetris-w5/</link>
      <pubDate>Sun, 29 Sep 2019 10:26:08 +0700</pubDate>
      <author>hieuletrung102@gmail.com (Hieu Le)</author>
      <guid>https://hieutle2011.github.io/post/nand/nand2tetris-w5/</guid>
      <description>Last week, my wife came to BKK to see me and we had a wonderful short trip to Koh Lan island just 40 minutes away from Pattaya. It had been almost 2 months since we last met when i was in Vietnam back then, so that we did enjoyed our time together. Moreover, we accompanied 2 great friends in Son and Tik and all four of us took photos, shared stories and laughed so hard in that sea food restaurant while playing Tik-guessing game and drinking beers.</description>
    </item>
    
    <item>
      <title>Nand2tetris W4</title>
      <link>https://hieutle2011.github.io/post/nand/nand2tetris-w4/</link>
      <pubDate>Sun, 15 Sep 2019 16:55:58 +0700</pubDate>
      <author>hieuletrung102@gmail.com (Hieu Le)</author>
      <guid>https://hieutle2011.github.io/post/nand/nand2tetris-w4/</guid>
      <description>Background
Every hardware platform is designed to execute commands in a certain machine language, expressed using agreed-upon binary codes. Writing programs directly in binary code is a possible, yet unnecessary. Instead, we can write such programs using a low-level symbolic language, called assembly, and have them translated into binary code by a program called assembler.
 Machine Language After making the gates and chips in previous 3 weeks, i had a chance to learn more about the machine language which is in binary form.</description>
    </item>
    
    <item>
      <title>Nand2tetris Week3</title>
      <link>https://hieutle2011.github.io/post/nand/nand2tetris-w3/</link>
      <pubDate>Sun, 08 Sep 2019 10:59:20 +0700</pubDate>
      <author>hieuletrung102@gmail.com (Hieu Le)</author>
      <guid>https://hieutle2011.github.io/post/nand/nand2tetris-w3/</guid>
      <description>Background
The computer&amp;rsquo;s main memory, also called Random Access Memory, or RAM, is an addressable sequence of n-bit registers, each designed to hold an n-bit value. In this project you will gradually build a RAM unit. This involves two main issues: (i) how to use gate logic to store bits persistently, over time, and (ii) how to use gate logic to locate (&amp;ldquo;address&amp;rdquo;) the memory register on which we wish to operate.</description>
    </item>
    
    <item>
      <title>Nand2tetris Week2</title>
      <link>https://hieutle2011.github.io/post/nand/nand2tetris-w2/</link>
      <pubDate>Mon, 26 Aug 2019 10:32:12 +0700</pubDate>
      <author>hieuletrung102@gmail.com (Hieu Le)</author>
      <guid>https://hieutle2011.github.io/post/nand/nand2tetris-w2/</guid>
      <description>Background
The centerpiece of the computer&amp;rsquo;s architecture is the CPU, or Central Processing Unit, and the centerpiece of the CPU is the ALU, or Arithmetic-Logic Unit. In this project you will gradually build a set of chips, culminating in the construction of the ALU chip of the Hack computer. All the chips built in this project are standard, except for the ALU itself, which differs from one computer architecture to another.</description>
    </item>
    
    <item>
      <title>Nand2tetris Intro</title>
      <link>https://hieutle2011.github.io/post/nand/nand2tetris/</link>
      <pubDate>Sun, 25 Aug 2019 21:50:13 +0700</pubDate>
      <author>hieuletrung102@gmail.com (Hieu Le)</author>
      <guid>https://hieutle2011.github.io/post/nand/nand2tetris/</guid>
      <description>Course Intro. Excited?
  </description>
    </item>
    
    <item>
      <title>Nand2tetris Week1</title>
      <link>https://hieutle2011.github.io/post/nand/nand2tetris-w1/</link>
      <pubDate>Sun, 25 Aug 2019 10:01:17 +0700</pubDate>
      <author>hieuletrung102@gmail.com (Hieu Le)</author>
      <guid>https://hieutle2011.github.io/post/nand/nand2tetris-w1/</guid>
      <description>Background
A typical computer architecture is based on a set of elementary logic gates like And, Or, Mux, etc., as well as their bit-wise versions And16, Or16, Mux16, etc. (assuming a 16-bit machine). This project engages you in the construction of a typical set of basic logic gates. These gates form the elementary building blocks from which more complex chips will be later constructed.
 Here is what i have learnt in this week.</description>
    </item>
    
  </channel>
</rss>