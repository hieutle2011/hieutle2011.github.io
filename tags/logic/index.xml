<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>logic on Hieu&#39;s Blog</title>
    <link>https://hieutle2011.github.io/tags/logic/</link>
    <description>Recent content in logic on Hieu&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <managingEditor>hieuletrung102@gmail.com (Hieu Le)</managingEditor>
    <webMaster>hieuletrung102@gmail.com (Hieu Le)</webMaster>
    <lastBuildDate>Mon, 26 Aug 2019 10:32:12 +0700</lastBuildDate>
    
	<atom:link href="https://hieutle2011.github.io/tags/logic/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Nand2tetris Week2</title>
      <link>https://hieutle2011.github.io/post/nand/nand2tetris-w2/</link>
      <pubDate>Mon, 26 Aug 2019 10:32:12 +0700</pubDate>
      <author>hieuletrung102@gmail.com (Hieu Le)</author>
      <guid>https://hieutle2011.github.io/post/nand/nand2tetris-w2/</guid>
      <description>Counting is the religion of this generation, its hope and salvation.
&amp;ndash; Gertrude Stein (1874â€“1946)
 1. The Theory Key concepts: Binary numbers, binary addition, the two&amp;rsquo;s complement method, half-adders, full-adders, n-bit adders, counters, Arithmetic Logic Unit (ALU), combinational logic.
After finishing week 1 rather quick, i was eager to start week 2 and looking forward to next type of chips. The theory is presented in such an easy way that i can do arithmetic calculation base 2 and 10, negative numbers right away.</description>
    </item>
    
    <item>
      <title>Nand2tetris Week1</title>
      <link>https://hieutle2011.github.io/post/nand/nand2tetris-w1/</link>
      <pubDate>Sun, 25 Aug 2019 10:01:17 +0700</pubDate>
      <author>hieuletrung102@gmail.com (Hieu Le)</author>
      <guid>https://hieutle2011.github.io/post/nand/nand2tetris-w1/</guid>
      <description>What i have learnt in this week.
1.Boolean laws Any boolean function can be represented using an expression containing only NAND operations.
Proof:  NOT(x) = (x NAND x)
 (x AND y) = NOT(x NAND y)
  2.Hardware description language  In computer engineering, a hardware description language is a specialized computer language used to describe the structure and behavior of electronic circuits, and most commonly, digital logic circuits.</description>
    </item>
    
  </channel>
</rss>